<?php

namespace GeorgRinger\NewsIrreContentPreview\Xclass;

use TYPO3\CMS\Backend\Form\Container\InlineRecordContainer;
use TYPO3\CMS\Backend\Utility\BackendUtility;
use TYPO3\CMS\Backend\View\PageLayoutView;
use TYPO3\CMS\Core\Imaging\Icon;
use TYPO3\CMS\Core\Imaging\ImageManipulation\CropVariantCollection;
use TYPO3\CMS\Core\Information\Typo3Version;
use TYPO3\CMS\Core\Resource\ProcessedFile;
use TYPO3\CMS\Core\Resource\ResourceFactory;
use TYPO3\CMS\Core\Utility\GeneralUtility;

/**
 * This file is part of the "news_irre_content_preview" Extension for TYPO3 CMS.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 */

/**
 * Xclass InlineRecordContainer to show better preview of tt_content elements
 */
class InlineRecordContainerForNews extends InlineRecordContainer
{


    /**
     * Renders the HTML header for a foreign record, such as the title, toggle-function, drag'n'drop, etc.
     * Later on the command-icons are inserted here.
     *
     * @param array $data Current data
     * @param string $ariaAttributesString HTML aria attributes for the collapse button
     * @return string The HTML code of the header
     */
    protected function renderForeignRecordHeader(array $data, string $ariaAttributesString)
    {
        $languageService = $this->getLanguageService();
        $inlineConfig = $data['inlineParentConfig'];

        if (!($inlineConfig['appearance']['useXclassedVersion'] ?? false)) {
            return parent::renderForeignRecordHeader($data, $ariaAttributesString);
        }

        $foreignTable = $inlineConfig['foreign_table'];
        $rec = $data['databaseRow'];
        $raw = BackendUtility::getRecord('tt_content', $rec['uid']);
        // Init:
        $domObjectId = $this->inlineStackProcessor->getCurrentStructureDomObjectIdPrefix($data['inlineFirstPid']);
        $objectId = $domObjectId . '-' . $foreignTable . '-' . ($rec['uid'] ?? 0);


        if (is_array($raw) && !empty($raw) && $raw['CType'] !== 'gridelements_pi1') {
            $renderFallback = false;
            $pageLayoutView = GeneralUtility::makeInstance(PageLayoutView::class);
            $pageLayoutView->doEdit = false;
            foreach ($GLOBALS['TCA']['tt_content']['columns']['CType']['config']['items'] as $val) {
                $pageLayoutView->CType_labels[$val[1]] = $this->getLanguageService()->sL($val[0]);
            }

            $recordTitle = trim($pageLayoutView->tt_content_drawItem($raw));
            if (strpos($recordTitle, $this->getWarningLabel($raw['CType'])) !== false) {
                $renderFallback = true;
            }
        }

        if ($renderFallback) {
            $recordTitle = $data['recordTitle'];
            if (!empty($recordTitle)) {
                // The user function may return HTML, therefore we can't escape it
                if (empty($data['processedTca']['ctrl']['formattedLabel_userFunc'])) {
                    $recordTitle = BackendUtility::getRecordTitlePrep($recordTitle);
                }
            } else {
                $recordTitle = '<em>[' . htmlspecialchars($languageService->sL('LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:labels.no_title')) . ']</em>';
            }

            // In case the record title is not generated by a formattedLabel_userFunc, which already
            // contains custom markup, and we are in debug mode, add the inline record table name.
            if (empty($data['processedTca']['ctrl']['formattedLabel_userFunc'])
                && $this->getBackendUserAuthentication()->shallDisplayDebugInformation()
            ) {
                $recordTitle .= ' <code class="m-0">[' . htmlspecialchars($foreignTable) . ']</code>';
            }
        }

        $altText = BackendUtility::getRecordIconAltText($rec, $foreignTable);

        $iconImg = '<span title="' . $altText . '" id="' . htmlspecialchars($objectId) . '_icon">' . $this->iconFactory->getIconForRecord($foreignTable, $rec, Icon::SIZE_SMALL)->render() . '</span>';
        $label = '<span id="' . $objectId . '_label">' . $recordTitle . '</span>';
        $ctrl = $this->renderForeignRecordHeaderControl($data);
        $thumbnail = false;

        // Renders a thumbnail for the header
        if (($GLOBALS['TYPO3_CONF_VARS']['GFX']['thumbnails'] ?? false) && !empty($inlineConfig['appearance']['headerThumbnail']['field'])) {
            $fieldValue = $rec[$inlineConfig['appearance']['headerThumbnail']['field']];
            $fileUid = $fieldValue[0]['uid'] ?? null;

            if (!empty($fileUid)) {
                try {
                    $fileObject = GeneralUtility::makeInstance(ResourceFactory::class)->getFileObject($fileUid);
                } catch (\InvalidArgumentException $e) {
                    $fileObject = null;
                }
                if ($fileObject && $fileObject->isMissing()) {
                    $thumbnail .= '<span class="label label-danger">'
                        . htmlspecialchars($languageService->sL('LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:warning.file_missing'))
                        . '</span>&nbsp;' . htmlspecialchars($fileObject->getName()) . '<br />';
                } elseif ($fileObject) {
                    $imageSetup = $inlineConfig['appearance']['headerThumbnail'] ?? [];
                    unset($imageSetup['field']);
                    $cropVariantCollection = CropVariantCollection::create($rec['crop'] ?? '');
                    if (!$cropVariantCollection->getCropArea()->isEmpty()) {
                        $imageSetup['crop'] = $cropVariantCollection->getCropArea()->makeAbsoluteBasedOnFile($fileObject);
                    }
                    $imageSetup = array_merge(['maxWidth' => '145', 'maxHeight' => '45'], $imageSetup);

                    if (($GLOBALS['TYPO3_CONF_VARS']['GFX']['thumbnails'] ?? false) && $fileObject->isImage()) {
                        $processedImage = $fileObject->process(ProcessedFile::CONTEXT_IMAGECROPSCALEMASK, $imageSetup);
                        // Only use a thumbnail if the processing process was successful by checking if image width is set
                        if ($processedImage->getProperty('width')) {
                            $imageUrl = $processedImage->getPublicUrl() ?? '';
                            $thumbnail = '<img src="' . htmlspecialchars($imageUrl) . '" ' .
                                'width="' . $processedImage->getProperty('width') . '" ' .
                                'height="' . $processedImage->getProperty('height') . '" ' .
                                'alt="' . htmlspecialchars($altText) . '" ' .
                                'title="' . htmlspecialchars($altText) . '">';
                        }
                    } else {
                        $thumbnail = '';
                    }
                }
            }
        }

        if (!empty($inlineConfig['appearance']['headerThumbnail']['field']) && $thumbnail) {
            $mediaContainer = '<div class="form-irre-header-thumbnail" id="' . $objectId . '_thumbnailcontainer">' . $thumbnail . '</div>';
        } else {
            $mediaContainer = '<div class="form-irre-header-icon" id="' . $objectId . '_iconcontainer">' . $iconImg . '</div>';
        }
        $header = '<button class="form-irre-header-cell form-irre-header-button" ' . $ariaAttributesString . '>' .
            $mediaContainer .
            '<div class="form-irre-header-body">' . $label . '</div>' .
            '</button>' .
            '<div class="form-irre-header-cell form-irre-header-control t3js-formengine-irre-control">' . $ctrl . '</div>';

        return $header;
    }

    /**
     * @param array $data
     * @return string
     */
    protected function _renderForeignRecordHeader(array $data): string
    {
        $languageService = $this->getLanguageService();
        $inlineConfig = $data['inlineParentConfig'];
        $foreignTable = $inlineConfig['foreign_table'];


        $rec = $data['databaseRow'];
        // Init:
        $domObjectId = $this->inlineStackProcessor->getCurrentStructureDomObjectIdPrefix($data['inlineFirstPid']);
        $objectId = $domObjectId . '-' . $foreignTable . '-' . $rec['uid'];

        $altText = BackendUtility::getRecordIconAltText($rec, $foreignTable);
        $iconImg = '<span title="' . $altText . '" id="' . htmlspecialchars($objectId) . '_icon' . '">' . $this->iconFactory->getIconForRecord($foreignTable, $rec, Icon::SIZE_SMALL)->render() . '</span>';

        $raw = BackendUtility::getRecord('tt_content', $rec['uid']);
        $renderFallback = true;
        if (is_array($raw) && !empty($raw) && $raw['CType'] !== 'gridelements_pi1') {
            $renderFallback = false;
            $pageLayoutView = GeneralUtility::makeInstance(PageLayoutView::class);
            $pageLayoutView->doEdit = false;
            foreach ($GLOBALS['TCA']['tt_content']['columns']['CType']['config']['items'] as $val) {
                $pageLayoutView->CType_labels[$val[1]] = $this->getLanguageService()->sL($val[0]);
            }

            $label = trim($pageLayoutView->tt_content_drawItem($raw));
            if (strpos($label, $this->getWarningLabel($raw['CType'])) !== false) {
                $renderFallback = true;
            }
        }

        if ($renderFallback) {
            $label = $data['recordTitle'];
            if (!empty($label)) {
                // The user function may return HTML, therefore we can't escape it
                if (empty($data['processedTca']['ctrl']['formattedLabel_userFunc'])) {
                    $label = BackendUtility::getRecordTitlePrep($label);
                }
            } else {
                $label = '<em>[' . htmlspecialchars($languageService->sL('LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:labels.no_title')) . ']</em>';
            }
        }

        $label = '<span id="' . $objectId . '_label">' . $label . '</span>';

        $header = '
                <button class="form-irre-header-cell form-irre-header-button" ' . $data['ariaAttributesString'] . '>' . '
                    <div class="form-irre-header-cell form-irre-header-icon" id="' . $objectId . '_iconcontainer" style="vertical-align:top;padding-top:8px;">' . $iconImg . '</div>
                    <div class="form-irre-header-cell form-irre-header-body">' . $label . '</div>
                </button>
                <div class="form-irre-header-cell form-irre-header-control t3js-formengine-irre-control">' . $this->renderForeignRecordHeaderControl($data) . '</div>';

        return $header;
    }

    /**
     * @param string $cType
     * @return string
     */
    protected function getWarningLabel($cType): string
    {
        $message = sprintf(
            $this->getLanguageService()->sL('LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:labels.noMatchingValue'),
            $cType
        );
        return htmlspecialchars($message);
    }
}
